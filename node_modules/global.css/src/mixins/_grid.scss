// =======================================
// mixins/_grid.scss
// from https://github.com/thingsym/flexbox-grid-mixins (very cool)
// =======================================

// define grid
@mixin grid(
  $display: flex,
  $flex-direction: null,
  $flex-wrap: null,
  $flex-flow: null,
  $justify-content: null,
  $align-items: null,
  $align-content: null,
  $gutter: null,
  $grid-type: skeleton
) {

  @if $display {
    display: $display;
  }

  @if $flex-direction {
    flex-direction: $flex-direction;
  }

  @if $flex-wrap {
    flex-wrap: $flex-wrap;
  }

  @if $flex-flow {
    flex-flow: $flex-flow;
  }

  @if $justify-content {
    justify-content: $justify-content;
  }

  @if $align-items {
    align-items: $align-items;
  }

  @if $align-content {
    align-content: $align-content;
  }

  @if $grid-type == skeleton {
    @if $gutter {
      @include grid-gutter($margin: 0 $gutter / 2 * -1);
    }
  }

  @content;
}

// define grid gutter
@mixin grid-gutter(
  $margin: null,
  $margin-top: null,
  $margin-right: null,
  $margin-bottom: null,
  $margin-left: null
){
  @if $margin != null {
    margin: $margin;
  }

  @if $margin-top != null {
    margin-top: $margin-top;
  }

  @if $margin-right != null {
    margin-right: $margin-right;
  }

  @if $margin-bottom != null {
    margin-bottom: $margin-bottom;
  }

  @if $margin-left != null {
    margin-left: $margin-left;
  }
}

// define grid col
@mixin grid-col(
  $col: null,
  $grid-columns: 24,
  $col-offset: null,
  $gutter: null,
  $condensed: false,
  $align-self: null,
  $flex-grow: 0,
  $flex-shrink: 1,
  $flex-basis: auto,
  $order: null,
  $grid-type: skeleton,
  $last-child: false
) {

  @if type-of($col) == number and unitless($col) == true {
    $flex-grow: 0;
    $flex-shrink: 0;
    $flex-basis: percentage($col / $grid-columns);

    @if $grid-type == skeleton {
      @if $gutter and unit($gutter) == '%' {
        $flex-basis: $flex-basis - $gutter;
      } @else if $gutter and unitless($gutter) == false {
        $flex-basis: calc(#{$flex-basis} - #{$gutter});
      }
    } @else if $grid-type == margin-offset {
      @if $gutter and unit($gutter) == '%' {
        $flex-basis: (100% - ($gutter * ($grid-columns / $col - 1))) / ($grid-columns / $col);
      } @else if $gutter and unitless($gutter) == false {
        $flex-basis: calc(#{$flex-basis} - #{$gutter * ($grid-columns / $col - 1) / ($grid-columns / $col)});
      }
    }

    @if $col-offset and unit($col-offset) == '%' {
      $flex-basis: $flex-basis + $col-offset;
    } @else if $col-offset and unitless($col-offset) == false {
      $flex-basis: calc(#{$flex-basis} + #{$col-offset});
    }
    width: $flex-basis;
  } @else if type-of($col) == number and unitless($col) == false {
    $flex-grow: 0;
    $flex-shrink: 0;
    $flex-basis: $col;
    width: $flex-basis;
  } @else if type-of($col) == string and $col == 'auto' {
    $flex-grow: 1;
    $flex-shrink: 1;
    $flex-basis: auto;
    max-width: 100%;
    width: auto;
  } @else if type-of($col) == string and $col == 'equal' {
    // flex: 1
    $flex-grow: 1;
    $flex-shrink: 1;
    $flex-basis: 0;
  } @else if type-of($col) == string and $col == 'none' {
    // flex: none
    $flex-grow: 0;
    $flex-shrink: 0;
    $flex-basis: auto;
  } @else if type-of($col) == string and $col == 'initial' {
    // flex: initial
    $flex-grow: 0;
    $flex-shrink: 1;
    $flex-basis: auto;
  } @else if type-of($col) == string and $col == 'breakpoint' {
    $flex-grow: 0;
    $flex-shrink: 1;
    $flex-basis: auto;
    width: 100%;
  }

  flex: $flex-grow $flex-shrink $flex-basis;

  @if $align-self {
    align-self: $align-self;
  }

  @if type-of($order) == number {
    order: $order;
  }

  @if $gutter and unitless($gutter) == false {
    @if $grid-type == skeleton {
      @if $condensed == true {
        @include grid-col-gutter($margin: 0 $gutter / 2);
      } @else {
        @include grid-col-gutter($margin: 0 $gutter / 2 $gutter);
      }
    } @else if $grid-type == margin-offset {
      @if type-of($col) == string and $col == 'breakpoint' {
        @include grid-col-gutter($margin-right: 0);
      } @else if $last-child {
        @include grid-col-gutter($margin-right: 0);
      } @else {
        @include grid-col-gutter($margin-right: $gutter);
      }

      @if $condensed == false {
        @include grid-col-gutter($margin-bottom: $gutter);
      }
    }
  }

  @content;
}

// define grid col gutter
@mixin grid-col-gutter(
  $margin: null,
  $margin-top: null,
  $margin-right: null,
  $margin-bottom: null,
  $margin-left: null
) {
  @include grid-gutter($margin, $margin-top, $margin-right, $margin-bottom, $margin-left);
}